"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const create_logger_1 = require("./create-logger");
function bootstrap(flags = {}) {
    return (0, create_logger_1.resolveLevel)({
        quiet: false,
        verbose: false,
        stackTrace: false,
        ...flags,
    });
}
function withEnv(logLevel, testFn) {
    process.env.RELAYER_LOG_LEVEL = logLevel;
    testFn();
    delete process.env.RELAYER_LOG_LEVEL;
}
(0, ava_1.default)("resolves to default level for invalid log-level", (t) => {
    t.deepEqual(bootstrap({ logLevel: "invalid-log-level" }), [
        create_logger_1.defaultLevel,
        "invalid-log-level",
    ]);
    t.deepEqual(bootstrap({ logLevel: "another-invalid-one", quiet: true }), [
        create_logger_1.defaultLevel,
        "another-invalid-one",
    ]);
    t.deepEqual(bootstrap({ logLevel: "something-invalid", verbose: true }), [
        create_logger_1.defaultLevel,
        "something-invalid",
    ]);
    t.deepEqual(bootstrap({ logLevel: "something-invalid", verbose: true, quiet: true }), [create_logger_1.defaultLevel, "something-invalid"]);
    t.deepEqual(bootstrap({ logLevel: "", verbose: true, quiet: true }), [
        create_logger_1.defaultLevel,
        "",
    ]);
    withEnv("random_env", () => {
        t.deepEqual(bootstrap({ verbose: true, quiet: true }), [
            create_logger_1.defaultLevel,
            "random_env",
        ]);
    });
    withEnv("another_random", () => {
        t.deepEqual(bootstrap(), [create_logger_1.defaultLevel, "another_random"]);
    });
    withEnv("", () => {
        t.deepEqual(bootstrap(), [create_logger_1.defaultLevel, ""]);
    });
});
(0, ava_1.default)("resolves to the most permissive level", (t) => {
    t.deepEqual(bootstrap({ logLevel: "info", quiet: true }), ["info", null]);
    t.deepEqual(bootstrap({ logLevel: "info", quiet: true, verbose: true }), [
        "verbose",
        null,
    ]);
    t.deepEqual(bootstrap({ logLevel: "info", verbose: true }), [
        "verbose",
        null,
    ]);
    t.deepEqual(bootstrap({ logLevel: "warn" }), ["warn", null]);
    t.deepEqual(bootstrap({ logLevel: "debug", verbose: true }), ["debug", null]);
    t.deepEqual(bootstrap({ logLevel: "error", verbose: true }), [
        "verbose",
        null,
    ]);
    withEnv("debug", () => {
        t.deepEqual(bootstrap({ quiet: true }), ["debug", null]);
    });
    withEnv("warn", () => {
        t.deepEqual(bootstrap({ quiet: true, verbose: true }), ["verbose", null]);
    });
    withEnv("warn", () => {
        t.deepEqual(bootstrap(), ["warn", null]);
    });
    withEnv("warn", () => {
        t.deepEqual(bootstrap({ logLevel: "error" }), ["error", null]);
    });
    withEnv("warn", () => {
        t.deepEqual(bootstrap({ logLevel: "error", verbose: true }), [
            "verbose",
            null,
        ]);
    });
    withEnv("verbose", () => {
        t.deepEqual(bootstrap({ quiet: true }), ["verbose", null]);
    });
    t.deepEqual(bootstrap({ verbose: true }), ["verbose", null]);
    t.deepEqual(bootstrap({ quiet: true }), ["error", null]);
    t.deepEqual(bootstrap({ quiet: true, verbose: true }), ["verbose", null]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWxvZ2dlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JpbmFyeS9jcmVhdGUtbG9nZ2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBdUI7QUFFdkIsbURBQTZEO0FBRzdELFNBQVMsU0FBUyxDQUFDLFFBQThCLEVBQUU7SUFDakQsT0FBTyxJQUFBLDRCQUFZLEVBQUM7UUFDbEIsS0FBSyxFQUFFLEtBQUs7UUFDWixPQUFPLEVBQUUsS0FBSztRQUNkLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLEdBQUcsS0FBSztLQUNULENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxRQUFnQixFQUFFLE1BQWtCO0lBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO0lBQ3pDLE1BQU0sRUFBRSxDQUFDO0lBQ1QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0FBQ3ZDLENBQUM7QUFFRCxJQUFBLGFBQUksRUFBQyxpREFBaUQsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzVELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRTtRQUN4RCw0QkFBWTtRQUNaLG1CQUFtQjtLQUNwQixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN2RSw0QkFBWTtRQUNaLHFCQUFxQjtLQUN0QixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN2RSw0QkFBWTtRQUNaLG1CQUFtQjtLQUNwQixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUNULFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUN4RSxDQUFDLDRCQUFZLEVBQUUsbUJBQW1CLENBQUMsQ0FDcEMsQ0FBQztJQUVGLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1FBQ25FLDRCQUFZO1FBQ1osRUFBRTtLQUNILENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtZQUNyRCw0QkFBWTtZQUNaLFlBQVk7U0FDYixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDN0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLDRCQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7UUFDZixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsNEJBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFBLGFBQUksRUFBQyx1Q0FBdUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ2xELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTFFLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1FBQ3ZFLFNBQVM7UUFDVCxJQUFJO0tBQ0wsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1FBQzFELFNBQVM7UUFDVCxJQUFJO0tBQ0wsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTdELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTlFLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUMzRCxTQUFTO1FBQ1QsSUFBSTtLQUNMLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQ25CLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDbkIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDbkIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDbkIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1lBQzNELFNBQVM7WUFDVCxJQUFJO1NBQ0wsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUN0QixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFN0QsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXpELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUMsQ0FBQyxDQUFDIn0=